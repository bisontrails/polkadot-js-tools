"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = toV10;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _types = require("@polkadot/types");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

// migrate a storage entry type - only map types are different (with a kind enum)
// all return the actual value for the enum, followed by the numeric index
function createStorageType(registry, entryType) {
  if (entryType.isPlain) {
    return [entryType.asPlain, 0];
  } else if (entryType.isDoubleMap) {
    return [entryType.asDoubleMap, 2];
  }

  const map = entryType.asMap; // map needs a migration, removing linked and adding an explicit kind

  return [_objectSpread({}, map, {
    kind: (0, _types.createType)(registry, 'MapKindV10', null, map.linked.isTrue ? 1 : 0)
  }), 1];
}

function convertModule(registry, mod) {
  const storage = mod.storage.unwrapOr(null);
  return (0, _types.createType)(registry, 'ModuleMetadataV10', _objectSpread({}, mod, {
    storage: storage ? _objectSpread({}, storage, {
      items: storage.items.map(item => _objectSpread({}, item, {
        type: (0, _types.createType)(registry, 'StorageEntryTypeV10', ...createStorageType(registry, item.type))
      }))
    }) : null
  }));
}
/**
 * Convert from MetadataV9 to MetadataV10
 */


function toV10(registry, _ref) {
  let {
    modules
  } = _ref;
  return (0, _types.createType)(registry, 'MetadataV10', {
    modules: modules.map(mod => convertModule(registry, mod))
  });
}