"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _createType = require("@polkadot/types/codec/create/createType");

var _Struct = _interopRequireDefault(require("@polkadot/types/codec/Struct"));

var _util = require("@polkadot/util");

var _MagicNumber = _interopRequireDefault(require("./MagicNumber"));

var _toV = _interopRequireDefault(require("./v0/toV1"));

var _toV2 = _interopRequireDefault(require("./v1/toV2"));

var _toV3 = _interopRequireDefault(require("./v2/toV3"));

var _toV4 = _interopRequireDefault(require("./v3/toV4"));

var _toV5 = _interopRequireDefault(require("./v4/toV5"));

var _toV6 = _interopRequireDefault(require("./v5/toV6"));

var _toV7 = _interopRequireDefault(require("./v6/toV7"));

var _toV8 = _interopRequireDefault(require("./v7/toV8"));

var _toV9 = _interopRequireDefault(require("./v8/toV9"));

var _toV10 = _interopRequireDefault(require("./v9/toV10"));

var _util2 = require("./util");

// Copyright 2017-2019 @polkadot/metadata authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.

/**
 * @name MetadataVersioned
 * @description
 * The versioned runtime metadata as a decoded structure
 */
class MetadataVersioned extends _Struct.default {
  constructor(registry, value) {
    super(registry, {
      magicNumber: _MagicNumber.default,
      metadata: 'MetadataAll'
    }, value);
    this._converted = new Map();
    registry.setMetadata(this);
  }

  assertVersion(version) {
    (0, _util.assert)(this.version <= version, "Cannot convert metadata from v".concat(this.version, " to v").concat(version));
    return this.version === version;
  }

  getVersion(version, fromPrev) {
    const asCurr = "asV".concat(version);
    const asPrev = "asV".concat(version - 1);

    if (this.assertVersion(version)) {
      return this.metadata[asCurr];
    }

    if (!this._converted.has(version)) {
      this._converted.set(version, fromPrev(this.registry, this[asPrev]));
    }

    return this._converted.get(version);
  }
  /**
   * @description Returns the wrapped metadata as a limited calls-only (latest) version
   */


  get asCallsOnly() {
    return new MetadataVersioned(this.registry, {
      magicNumber: this.magicNumber,
      metadata: (0, _createType.createType)(this.registry, 'MetadataAll', (0, _util2.toCallsOnly)(this.registry, this.asLatest), this.version)
    });
  }
  /**
   * @description Returns the wrapped metadata as a V0 object
   */


  get asV0() {
    this.assertVersion(0);
    return this.metadata.asV0;
  }
  /**
   * @description Returns the wrapped values as a V1 object
   */


  get asV1() {
    return this.getVersion(1, _toV.default);
  }
  /**
   * @description Returns the wrapped values as a V2 object
   */


  get asV2() {
    return this.getVersion(2, _toV2.default);
  }
  /**
   * @description Returns the wrapped values as a V3 object
   */


  get asV3() {
    return this.getVersion(3, _toV3.default);
  }
  /**
   * @description Returns the wrapped values as a V4 object
   */


  get asV4() {
    return this.getVersion(4, _toV4.default);
  }
  /**
   * @description Returns the wrapped values as a V5 object
   */


  get asV5() {
    return this.getVersion(5, _toV5.default);
  }
  /**
   * @description Returns the wrapped values as a V6 object
   */


  get asV6() {
    return this.getVersion(6, _toV6.default);
  }
  /**
   * @description Returns the wrapped values as a V7 object
   */


  get asV7() {
    return this.getVersion(7, _toV7.default);
  }
  /**
   * @description Returns the wrapped values as a V8 object
   */


  get asV8() {
    return this.getVersion(8, _toV8.default);
  }
  /**
   * @description Returns the wrapped values as a V9 object
   */


  get asV9() {
    return this.getVersion(9, _toV9.default);
  }
  /**
   * @description Returns the wrapped values as a V10 object
   */


  get asV10() {
    return this.getVersion(10, _toV10.default);
  }
  /**
   * @description Returns the wrapped values as a latest version object
   */


  get asLatest() {
    return this.asV10;
  }
  /**
   * @description
   */


  get magicNumber() {
    return this.get('magicNumber');
  }
  /**
   * @description the metadata wrapped
   */


  get metadata() {
    return this.get('metadata');
  }
  /**
   * @description the metadata version this structure represents
   */


  get version() {
    return this.metadata.index;
  }

  getUniqTypes(throwError) {
    return (0, _util2.getUniqTypes)(this.registry, this.asLatest, throwError);
  }

}

exports.default = MetadataVersioned;