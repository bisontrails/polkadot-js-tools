"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createFunction;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _codec = require("@polkadot/types/codec");

var _util = require("@polkadot/util");

var _utilCrypto = require("@polkadot/util-crypto");

var _getHasher = _interopRequireDefault(require("./getHasher"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const EMPTY_U8A = new Uint8Array([]);

const NULL_HASHER = value => value; // with the prefix, method & options, create both the string & raw keys


function expandKey(_ref, options) {
  let {
    method,
    prefix
  } = _ref;
  return options.key ? options.key : "".concat(prefix, " ").concat(method);
} // get the hashers, the base (and  in the case of DoubleMap), the second key


function getHashers(_ref2) {
  let {
    meta: {
      type
    }
  } = _ref2;

  if (type.isDoubleMap) {
    return [(0, _getHasher.default)(type.asDoubleMap.hasher), (0, _getHasher.default)(type.asDoubleMap.key2Hasher)];
  } else if (type.isMap) {
    return [(0, _getHasher.default)(type.asMap.hasher)];
  } // the default


  return [(0, _getHasher.default)()];
} // create a base prefixed key


function createPrefixedKey(_ref3) {
  let {
    method,
    prefix
  } = _ref3;
  return (0, _util.u8aConcat)((0, _utilCrypto.xxhashAsU8a)(prefix, 128), (0, _utilCrypto.xxhashAsU8a)(method, 128));
} // create a key for a DoubleMap type


function createKeyDoubleMap(registry, itemFn, stringKey, args, _ref4, metaVersion) {
  let [hasher1, hasher2] = _ref4;
  const {
    meta: {
      name,
      type
    }
  } = itemFn; // since we are passing an almost-unknown through, trust, but verify

  (0, _util.assert)(Array.isArray(args) && !(0, _util.isUndefined)(args[0]) && !(0, _util.isNull)(args[0]) && !(0, _util.isUndefined)(args[1]) && !(0, _util.isNull)(args[1]), "".concat(name, " is a DoubleMap and requires two arguments")); // if this fails, we have bigger issues

  (0, _util.assert)(!(0, _util.isUndefined)(hasher2), '2 hashing functions should be defined for DoubleMaps');
  const [key1, key2] = args;
  const map = type.asDoubleMap;
  const val1 = (0, _codec.createTypeUnsafe)(registry, map.key1.toString(), [key1]).toU8a(true);
  const val2 = (0, _codec.createTypeUnsafe)(registry, map.key2.toString(), [key2]).toU8a(true); // as per createKey, always add the length prefix (underlying it is Bytes)

  return _codec.Compact.addLengthPrefix(metaVersion <= 8 ? (0, _util.u8aConcat)(hasher1((0, _util.u8aConcat)((0, _util.stringToU8a)(stringKey), val1)), hasher2(val2)) : (0, _util.u8aConcat)(createPrefixedKey(itemFn), hasher1(val1), hasher2(val2)));
} // create a key for either a map or a plain value


function createKey(registry, itemFn, stringKey, arg, hasher, metaVersion) {
  const {
    meta: {
      name,
      type
    }
  } = itemFn;
  let key;
  let param = EMPTY_U8A;

  if (type.isMap) {
    const map = type.asMap;
    (0, _util.assert)(!(0, _util.isUndefined)(arg) && !(0, _util.isNull)(arg), "".concat(name, " is a Map and requires one argument"));
    param = (0, _codec.createTypeUnsafe)(registry, map.key.toString(), [arg]).toU8a(); // prefix maps are using prefixes to optimize the trie, so the key generation are
    // done differently where the prefix/method are hashed separately with only the
    // parameter for the key being attached via the hasher

    if (map.kind.isPrefixedMap) {
      key = (0, _util.u8aConcat)(createPrefixedKey(itemFn), hasher(param));
    }
  } // StorageKey is a Bytes, so is length-prefixed


  return _codec.Compact.addLengthPrefix(key || (metaVersion <= 8 ? hasher((0, _util.u8aConcat)((0, _util.stringToU8a)(stringKey), param)) : (0, _util.u8aConcat)(createPrefixedKey(itemFn), param.length ? hasher(param) : EMPTY_U8A)));
} // attach the metadata to expand to a StorageFunction


function expandWithMeta(_ref5, storageFn) {
  let {
    meta,
    method,
    prefix,
    section
  } = _ref5;
  storageFn.meta = meta;
  storageFn.method = (0, _util.stringLowerFirst)(method);
  storageFn.prefix = prefix;
  storageFn.section = section; // explicitly add the actual method in the toJSON, this gets used to determine caching and without it
  // instances (e.g. collective) will not work since it is only matched on param meta

  storageFn.toJSON = () => _objectSpread({}, meta.toJSON(), {
    storage: {
      method,
      prefix,
      section
    }
  });

  return storageFn;
}

function extendHeadMeta(registry, _ref6, _ref7, iterFn) {
  let {
    meta: {
      documentation,
      name,
      type
    },
    section
  } = _ref6;
  let {
    method
  } = _ref7;
  const map = type.asMap;
  const outputType = map.key.toString(); // metadata with a fallback value using the type of the key, the normal
  // meta fallback only applies to actual entry values, create one for head

  iterFn.meta = (0, _codec.createType)(registry, 'StorageEntryMetadataLatest', {
    name,
    modifier: (0, _codec.createType)(registry, 'StorageEntryModifierLatest', 1),
    // required
    type: (0, _codec.createType)(registry, 'StorageEntryTypeLatest', (0, _codec.createType)(registry, 'PlainTypeLatest', map.key), 0),
    fallback: (0, _codec.createType)(registry, 'Bytes', (0, _codec.createTypeUnsafe)(registry, outputType).toHex()),
    documentation
  });
  return (0, _codec.createType)(registry, 'StorageKey', iterFn, {
    method,
    section
  });
} // attach the head key hashing for linked maps


function extendLinkedMap(registry, itemFn, storageFn, stringKey, hasher, metaVersion) {
  const key = metaVersion <= 8 ? hasher("head of ".concat(stringKey)) : (0, _util.u8aConcat)((0, _utilCrypto.xxhashAsU8a)(itemFn.prefix, 128), (0, _utilCrypto.xxhashAsU8a)("HeadOf".concat(itemFn.method), 128));
  storageFn.iterKey = extendHeadMeta(registry, itemFn, storageFn, () => new _codec.U8a(registry, key));
  return storageFn;
} // attach the full list hashing for prefixed maps


function extendPrefixedMap(registry, itemFn, storageFn) {
  storageFn.iterKey = extendHeadMeta(registry, itemFn, storageFn, () => new _codec.U8a(registry, createPrefixedKey(itemFn)));
  return storageFn;
}
/**
 * From the schema of a function in the module's storage, generate the function
 * that will return the correct storage key.
 *
 * @param item - The function's definition schema to create the function from.
 * The schema is taken from state_getMetadata.
 * @param options - Additional options when creating the function. These options
 * are not known at runtime (from state_getMetadata), they need to be supplied
 * by us manually at compile time.
 */


function createFunction(registry, itemFn, options) {
  const {
    meta: {
      type
    }
  } = itemFn;
  const stringKey = expandKey(itemFn, options);
  const [hasher, key2Hasher] = getHashers(itemFn); // Can only have zero or one argument:
  //   - storage.balances.freeBalance(address)
  //   - storage.timestamp.blockPeriod()
  // For doublemap queries the params is passed in as an tuple, [key1, key2]

  const _storageFn = arg => type.isDoubleMap ? createKeyDoubleMap(registry, itemFn, stringKey, arg, [hasher, key2Hasher], options.metaVersion) : createKey(registry, itemFn, stringKey, arg, options.skipHashing ? NULL_HASHER : hasher, options.metaVersion);

  const storageFn = expandWithMeta(itemFn, _storageFn);

  if (type.isMap) {
    const map = type.asMap;

    if (map.kind.isLinkedMap) {
      extendLinkedMap(registry, itemFn, storageFn, stringKey, hasher, options.metaVersion);
    } else if (map.kind.isPrefixedMap) {
      extendPrefixedMap(registry, itemFn, storageFn);
    }
  }

  return storageFn;
}