"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getMetadataTypes = getMetadataTypes;
exports.getChainTypes = getChainTypes;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _util = require("@polkadot/util");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

// these are override types for polkadot chains
// NOTE The SessionKeys definition for Polkadot and Substrate (OpaqueKeys
// implementation) are different. Detect Polkadot and inject the `Keys`
// definition as applicable. (4 keys in substrate vs 5 in Polkadot/CC3).
const TYPES_POLKADOT_VERSIONED = [{
  minmax: [0, 1018],
  // CC2
  types: {
    Keys: 'SessionKeys4',
    ValidatorPrefs: 'ValidatorPrefsTo196'
  }
}, {
  minmax: [1019, undefined],
  // CC3
  types: {
    Keys: 'SessionKeys5'
  }
}]; // Type overrides based on specific nodes

const TYPES_CHAIN = {}; // Type overrides based on  metadata versions

const TYPES_META = [{
  // NOTE this is for support of old, e.g. Alex, old metadata and BlockNumber/Index
  // This is detected based on metadata version, since this is what we have up-front
  //   v3 = Alex
  //   v4 = v1.0 branch
  minmax: [0, 4],
  types: {
    BlockNumber: 'u64',
    Index: 'u64',
    EventRecord: 'EventRecordTo76',
    ValidatorPrefs: 'ValidatorPrefsTo145'
  }
}]; // Type overrides for specific spec types & versions as given in runtimeVersion

const TYPES_SPEC = {
  kusama: TYPES_POLKADOT_VERSIONED,
  polkadot: TYPES_POLKADOT_VERSIONED
}; // flatten a VersionedType[] into a Record<string, string>

function filterVersions() {
  let versions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  let version = arguments.length > 1 ? arguments[1] : undefined;
  return versions.filter((_ref) => {
    let {
      minmax: [min, max]
    } = _ref;
    return ((0, _util.isUndefined)(min) || version >= min) && ((0, _util.isUndefined)(max) || version <= max);
  }).reduce((result, _ref2) => {
    let {
      types
    } = _ref2;
    return _objectSpread({}, result, {}, types);
  }, {});
} // based on the metadata version, return the registry types


function getMetadataTypes(version) {
  return filterVersions(TYPES_META, version);
} // based on the chain and runtimeVersion, get the applicable types (ready for registration)


function getChainTypes(chainName, _ref3) {
  let {
    specName,
    specVersion
  } = _ref3;
  let typesChain = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  let typesSpec = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

  const _chainName = chainName.toString();

  const _specName = specName.toString();

  const _specVersion = specVersion.toNumber();

  return _objectSpread({}, filterVersions(TYPES_SPEC[_specName], _specVersion), {}, filterVersions(TYPES_CHAIN[_chainName], _specVersion), {}, typesSpec[_specName] || {}, {}, typesChain[_chainName] || {});
}